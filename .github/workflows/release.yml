name: Deploy

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - build: linux-arm
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu

          - build: linux-armv7
            os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf

          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin

          - build: macos-arm
            os: macos-latest
            target: aarch64-apple-darwin

          - build: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc

          - build: windows-arm
            os: windows-latest
            target: aarch64-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install Linux ARM64 cross toolchain and libc
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Install Linux ARMv7 cross toolchain and libc
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf libc6-dev-armhf-cross

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Set up Cargo cross-linker config
        shell: bash
        run: |
          mkdir -p .cargo
          cat <<EOF > .cargo/config.toml
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          EOF

      - name: Build
        run: cargo build --verbose --release --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          # Replace with the name of your binary
          binary_name="sync-nudger"

          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname/"
          else
            cp "target/${{ matrix.target }}/release/$binary_name" "$dirname/"
          fi

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "$dirname.zip" "$dirname"
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            tar -czf "$dirname.tar.gz" "$dirname"
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: sync-nudger-${{ env.VERSION }}-${{ matrix.target }}${{ matrix.os == 'windows-latest' && '.zip' || '.tar.gz' }}
          path: |
            *.zip
            *.tar.gz
          if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: build-and-upload
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/artifacts

      - name: List all files in artifacts
        run: |
          echo "Listing all files and directories in ${{ github.workspace }}/artifacts:"
          find ${{ github.workspace }}/artifacts -print

      - name: Checkout
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: RELEASE_NOTES.md
          files: |
            ${{ github.workspace }}/artifacts/*/*.tar.gz
            ${{ github.workspace }}/artifacts/*/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}